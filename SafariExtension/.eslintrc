env:
  es6: true
  node: true
  browser: true

# enable ECMAScript features
ecmaFeatures:
  arrowFunctions: true
  binaryLiterals: true
  blockBindings: true
  classes: true
  forOf: true
  generators: true
  objectLiteralShorthandMethods: true
  objectLiteralShorthandProperties: true
  octalLiterals: true
  templateStrings: true

rules:
  # Possible Errors
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#possible-errors
  ## enforce dangling commas
  comma-dangle: 0
  ## disallow assignment in conditional statements
  no-cond-assign: 2
  ## disallow use of console
  no-console: 0
  ## disallow use of constant expressions in conditions
  no-constant-condition: 2
  ## disallow controls characters in regular expressions
  no-control-regex: 0
  ## check debugger sentence
  no-debugger: 2
  ## check duplicate arguments
  no-dupe-args: 2
  ## check duplicate object keys
  no-dupe-keys: 2
  ## check duplicate switch-case
  no-duplicate-case: 2
  ## disallow empty character classes
  no-empty-character-class: 2
  ## disallow empty block statements
  no-empty: 2
  ## disallow assignment of exceptional params
  no-ex-assign: 2
  ## disallow extra boolean casts
  no-extra-boolean-cast: 2
  ## disallow extra parens
  no-extra-parens: [2, "functions"]
  ## disallow extra semicolons
  no-extra-semi: 2
  ## disallow function assignment
  no-func-assign: 2
  ## declarations in program or function body
  no-inner-declarations: 0
  ## disallow invalid regular expressions
  no-invalid-regexp: 2
  ## no irregular whitespace
  no-irregular-whitespace: 2
  ## disallow negated left operand of `in` operator
  no-negated-in-lhs: 2
  ## disallow global object function calls
  no-obj-calls: 2
  ## disallow spaces in regular expressions
  no-regex-spaces: 0
  ## disallow use of reserved words as keys like enum, class
  no-reserved-keys: 0
  ## disallow sparse arrays
  no-sparse-arrays: 2
  ## disallow unreachable code
  no-unreachable: 2
  ## require isNan()
  use-isnan: 2
  ## validates JSDoc comments are syntacitically correct
  valid-jsdoc: 0
  ## require valid typeof compared string like typeof foo === 'strnig'
  valid-typeof: 2
  ## avoid unexpected multiline expressions
  no-unexpected-multiline: 2

  # Best Practices
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#best-practices
  ## require return statements in callbacks of array's methods
  array-callback-return: 2
  ## treat var as block scoped
  block-scoped-var: 2
  ## require following curly brace conventions
  curly: 0
  ## require default case in switch statements
  default-case: 2
  ## require dot notation
  dot-notation: 2
  ## enforce newline before and after dot
  dot-location: [2, "property"]
  ## require === and !==
  eqeqeq: 2
  ## disallow use of caller/callee
  no-caller: 2
  ## disallow return in else
  no-else-return: 0
  ## Disallow Null Comparisons
  no-eq-null: 2
  ## disallow eval()
  no-eval: 2
  ## disallow extending of native objects
  no-extend-native: 2
  ## require falls through comment on switch-case
  no-fallthrough: 2
  ## disallow floating decimals
  no-floating-decimal: 2
  ## disallow functions in loops
  no-loop-func: 2
  ## disallow multiple spaces
  no-multi-spaces: 2
  ## disallow multiline strings
  no-multi-str: 2
  ## disallow use of __proto__
  no-proto: 2
  ## disallow redeclaring variables
  no-redeclare: [2, {builtinGlobals: false}]
  ## disallow assignment in return statement
  no-return-assign: 2
  ## disallow unmodified conditions of loops
  no-unmodified-loop-condition: 2
  ## disallow unused expressions
  no-unused-expressions: 2
  ## disallow use of the void operator
  no-void: 2

  # Strict Mode
  # list: https://github.comeselint/eslint/tree/master/docs/rules#strict-mode
  ## 'use strict' on top
  strict: [2, "global"]

  # Variables
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#variables
  # disallow initializing to undefined
  no-undef-init: 2
  ## disallow use of undefined variables (globals)
  no-undef: 2
  ## disallow unused variables
  no-unused-vars: 2
  ## disallow early use
  no-use-before-define: [2, "nofunc"]

  # Node.js and Common.js
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#nodejs-and-commonjs
  ## disallow mixed requires
  no-mixed-requires: 2
  ## disallow new require
  no-new-require: 2

  # Stylistic Issues
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#stylistic-issues
  ## enforce spaces inside of single line blocks
  block-spacing: 2
  ## require camelcase
  camelcase: [2, {properties: "never"}]
  ## add space after comma
  comma-spacing: [2, {before: false, after: true}]
  ## comma style
  comma-style: [2, "last"]
  ## disallow spaces inside of computed properties
  computed-property-spacing: [2, "never"]
  ## require newline at end of files
  eol-last: 0
  ## 2 space indentation
  indent: [2, 2, { "SwitchCase": 1 }]
  ## enforce property spacing (after colon)
  key-spacing: [2, {"beforeColon": false, "afterColon": true}]
  ## disallow mixing CRLF and LF linebreaks
  linebreak-style: [2, "unix"]
  ## set maximum depth of nested callbacks (Maximum allowed is 3.)
  max-nested-callbacks: [2, 10]
  ## require constructors to use initial caps
  new-cap: 2
  ## require parens for Constructor
  new-parens: 2
  ## max 2 consecutive empty lines
  no-multiple-empty-lines: [2, {max: 2}]
  ## disallow nested ternaries
  no-nested-ternary: 2
  ## disallow spaces in function calls
  no-spaced-func: 2
  ## allow ternary operator
  no-ternary: 0
  ## no trailing spaces
  no-trailing-spaces: 2
  ## disallow conditional expressions that can be expressed with simpler constructs
  no-unneeded-ternary: 2
  ## disallow whitespace before properties
  no-whitespace-before-property: 2
  ## enforce spaces inside of curly braces in objects
  object-curly-spacing: [2, "always"]
  ## operator linebreak
  operator-linebreak: [2, "after"]
  ## quoting style for property names
  quote-props: [2, "as-needed"]
  ## use single quote, we can use double quote when escape chars
  quotes: [2, "single", "avoid-escape"]
  ## put semi-colon
  semi: 2
  ## enforce spacing before and after semicolons
  semi-spacing: 2
  # require space before and after keywords
  keyword-spacing: 2
  ## require space before blocks, eg 'function() {'
  space-before-blocks: [2, "always"]
  ## no space before function, eg. 'function()'
  space-before-function-paren: [2, "never"]
  ## disallow spaces inside of parentheses
  space-in-parens: [2, "never"]
  ## require spaces around infix operators
  space-infix-ops: 0
  ## disallow spaces before/after unary operators
  space-unary-ops: 2

  # ECMAScript 6
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#ecmascript-6
  ## require parens in arrow function arguments
  arrow-parens: [2, "always"]
  ## require space before/after arrow function's arrow
  arrow-spacing: 2
  ## verify calls of super() in constructors
  constructor-super: 2
  ## enforce spacing around the * in generator functions
  generator-star-spacing: [2, {"before": false, "after": true}]
  ## disallow modifying variables of class declarations
  no-class-assign: 2
  ## disallow arrow functions where they could be confused with comparisons
  no-confusing-arrow: 2
  ## disallow modifying variables that are declared using const
  no-const-assign: 2
  ## disallow duplicate name in class members
  no-dupe-class-members: 2
  ## require let or const instead of var
  #no-var: 2
  ## require Object Literal Shorthand Syntax
  #object-shorthand: 2
  ## suggest using arrow functions as callbacks
  #prefer-arrow-callback: 1
  ## suggest using const
  #prefer-const: 1
  ## suggest using the spread operator instead of .apply()
  #prefer-spread: 1
  ## suggest using template literals instead of string concatenation.
  prefer-template: 1
  ## require usage of spacing in TemplateStrings
  template-curly-spacing: 2

  # Legacy
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#legacy
  ## max 80 length
  max-len: [0, 80, 2]
